// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloServerClient is the client API for HelloServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SendStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloServer_SendStreamClient, error)
	GetStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetStreamClient, error)
	GetAndSend(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetAndSendClient, error)
}

type helloServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServerClient(cc grpc.ClientConnInterface) HelloServerClient {
	return &helloServerClient{cc}
}

func (c *helloServerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/demo.v1.HelloServer/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServerClient) SendStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloServer_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[0], "/demo.v1.HelloServer/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerSendStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloServer_SendStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServerSendStreamClient struct {
	grpc.ClientStream
}

func (x *helloServerSendStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[1], "/demo.v1.HelloServer/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerGetStreamClient{stream}
	return x, nil
}

type HelloServer_GetStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServerGetStreamClient struct {
	grpc.ClientStream
}

func (x *helloServerGetStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerGetStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServerClient) GetAndSend(ctx context.Context, opts ...grpc.CallOption) (HelloServer_GetAndSendClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloServer_ServiceDesc.Streams[2], "/demo.v1.HelloServer/GetAndSend", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServerGetAndSendClient{stream}
	return x, nil
}

type HelloServer_GetAndSendClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloServerGetAndSendClient struct {
	grpc.ClientStream
}

func (x *helloServerGetAndSendClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServerGetAndSendClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServerServer is the server API for HelloServer service.
// All implementations must embed UnimplementedHelloServerServer
// for forward compatibility
type HelloServerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SendStream(*HelloRequest, HelloServer_SendStreamServer) error
	GetStream(HelloServer_GetStreamServer) error
	GetAndSend(HelloServer_GetAndSendServer) error
	mustEmbedUnimplementedHelloServerServer()
}

// UnimplementedHelloServerServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServerServer struct {
}

func (UnimplementedHelloServerServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloServerServer) SendStream(*HelloRequest, HelloServer_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedHelloServerServer) GetStream(HelloServer_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedHelloServerServer) GetAndSend(HelloServer_GetAndSendServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAndSend not implemented")
}
func (UnimplementedHelloServerServer) mustEmbedUnimplementedHelloServerServer() {}

// UnsafeHelloServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServerServer will
// result in compilation errors.
type UnsafeHelloServerServer interface {
	mustEmbedUnimplementedHelloServerServer()
}

func RegisterHelloServerServer(s grpc.ServiceRegistrar, srv HelloServerServer) {
	s.RegisterService(&HelloServer_ServiceDesc, srv)
}

func _HelloServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.HelloServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloServer_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServerServer).SendStream(m, &helloServerSendStreamServer{stream})
}

type HelloServer_SendStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloServerSendStreamServer struct {
	grpc.ServerStream
}

func (x *helloServerSendStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloServer_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).GetStream(&helloServerGetStreamServer{stream})
}

type HelloServer_GetStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServerGetStreamServer struct {
	grpc.ServerStream
}

func (x *helloServerGetStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerGetStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloServer_GetAndSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServerServer).GetAndSend(&helloServerGetAndSendServer{stream})
}

type HelloServer_GetAndSendServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloServerGetAndSendServer struct {
	grpc.ServerStream
}

func (x *helloServerGetAndSendServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServerGetAndSendServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer_ServiceDesc is the grpc.ServiceDesc for HelloServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.HelloServer",
	HandlerType: (*HelloServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloServer_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _HelloServer_SendStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _HelloServer_GetStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAndSend",
			Handler:       _HelloServer_GetAndSend_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}
